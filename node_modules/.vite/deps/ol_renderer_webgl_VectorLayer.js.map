{
  "version": 3,
  "sources": ["../../ol/render/webgl/MixedGeometryBatch.js", "../../ol/render/webgl/renderinstructions.js", "../../ol/render/webgl/VectorStyleRenderer.js", "../../ol/renderer/webgl/VectorLayer.js"],
  "sourcesContent": ["/**\n * @module ol/render/webgl/MixedGeometryBatch\n */\nimport RenderFeature from '../../render/Feature.js';\nimport {getUid} from '../../util.js';\nimport {inflateEnds} from '../../geom/flat/orient.js';\n\n/**\n * @typedef {import(\"../../Feature.js\").default} Feature\n */\n/**\n * @typedef {import(\"../../geom/Geometry.js\").Type} GeometryType\n */\n\n/**\n * @typedef {Object} GeometryBatchItem Object that holds a reference to a feature as well as the raw coordinates of its various geometries\n * @property {Feature|RenderFeature} feature Feature\n * @property {Array<Array<number>>} flatCoordss Array of flat coordinates arrays, one for each geometry related to the feature\n * @property {number} [verticesCount] Only defined for linestring and polygon batches\n * @property {number} [ringsCount] Only defined for polygon batches\n * @property {Array<Array<number>>} [ringsVerticesCounts] Array of vertices counts in each ring for each geometry; only defined for polygons batches\n * @property {number} [ref] The reference in the global batch (used for hit detection)\n */\n\n/**\n * @typedef {PointGeometryBatch|LineStringGeometryBatch|PolygonGeometryBatch} GeometryBatch\n */\n\n/**\n * @typedef {Object} PolygonGeometryBatch A geometry batch specific to polygons\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\n * @property {number} ringsCount How many outer and inner rings in this batch.\n */\n\n/**\n * @typedef {Object} LineStringGeometryBatch A geometry batch specific to lines\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\n */\n\n/**\n * @typedef {Object} PointGeometryBatch A geometry batch specific to points\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n */\n\n/**\n * @classdesc This class is used to group several geometries of various types together for faster rendering.\n * Three inner batches are maintained for polygons, lines and points. Each time a feature is added, changed or removed\n * from the batch, these inner batches are modified accordingly in order to keep them up-to-date.\n *\n * A feature can be present in several inner batches, for example a polygon geometry will be present in the polygon batch\n * and its linear rings will be present in the line batch. Multi geometries are also broken down into individual geometries\n * and added to the corresponding batches in a recursive manner.\n *\n * Corresponding {@link module:ol/render/webgl/BatchRenderer} instances are then used to generate the render instructions\n * and WebGL buffers (vertices and indices) for each inner batches; render instructions are stored on the inner batches,\n * alongside the transform used to convert world coords to screen coords at the time these instructions were generated.\n * The resulting WebGL buffers are stored on the batches as well.\n *\n * An important aspect of geometry batches is that there is no guarantee that render instructions and WebGL buffers\n * are synchronized, i.e. render instructions can describe a new state while WebGL buffers might not have been written yet.\n * This is why two world-to-screen transforms are stored on each batch: one for the render instructions and one for\n * the WebGL buffers.\n */\nclass MixedGeometryBatch {\n  constructor() {\n    this.globalCounter_ = 0;\n    /**\n     * Refs are used as keys for hit detection.\n     * @type {Map<number, Feature|RenderFeature>}\n     * @private\n     */\n    this.refToFeature_ = new Map();\n\n    /**\n     * Features are split in \"entries\", which are individual geometries. We use the following map to share a single ref for all those entries.\n     * @type {Map<string, number>}\n     * @private\n     */\n    this.uidToRef_ = new Map();\n\n    /**\n     * The precision in WebGL shaders is limited.\n     * To keep the refs as small as possible we maintain an array of returned references.\n     * @type {Array<number>}\n     * @private\n     */\n    this.freeGlobalRef_ = [];\n\n    /**\n     * @type {PolygonGeometryBatch}\n     */\n    this.polygonBatch = {\n      entries: {},\n      geometriesCount: 0,\n      verticesCount: 0,\n      ringsCount: 0,\n    };\n\n    /**\n     * @type {PointGeometryBatch}\n     */\n    this.pointBatch = {\n      entries: {},\n      geometriesCount: 0,\n    };\n\n    /**\n     * @type {LineStringGeometryBatch}\n     */\n    this.lineStringBatch = {\n      entries: {},\n      geometriesCount: 0,\n      verticesCount: 0,\n    };\n  }\n\n  /**\n   * @param {Array<Feature|RenderFeature>} features Array of features to add to the batch\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\n   */\n  addFeatures(features, projectionTransform) {\n    for (let i = 0; i < features.length; i++) {\n      this.addFeature(features[i], projectionTransform);\n    }\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature to add to the batch\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\n   */\n  addFeature(feature, projectionTransform) {\n    let geometry = feature.getGeometry();\n    if (!geometry) {\n      return;\n    }\n    if (projectionTransform) {\n      geometry = geometry.clone();\n      geometry.applyTransform(projectionTransform);\n    }\n    this.addGeometry_(geometry, feature);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInPointBatch_(feature) {\n    const entry = this.pointBatch.entries[getUid(feature)];\n    if (!entry) {\n      return;\n    }\n    this.pointBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.pointBatch.entries[getUid(feature)];\n    return entry;\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInLineStringBatch_(feature) {\n    const entry = this.lineStringBatch.entries[getUid(feature)];\n    if (!entry) {\n      return;\n    }\n    this.lineStringBatch.verticesCount -= entry.verticesCount;\n    this.lineStringBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.lineStringBatch.entries[getUid(feature)];\n    return entry;\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInPolygonBatch_(feature) {\n    const entry = this.polygonBatch.entries[getUid(feature)];\n    if (!entry) {\n      return;\n    }\n    this.polygonBatch.verticesCount -= entry.verticesCount;\n    this.polygonBatch.ringsCount -= entry.ringsCount;\n    this.polygonBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.polygonBatch.entries[getUid(feature)];\n    return entry;\n  }\n\n  /**\n   * @param {import(\"../../geom.js\").Geometry|RenderFeature} geometry Geometry\n   * @param {Feature|RenderFeature} feature Feature\n   * @private\n   */\n  addGeometry_(geometry, feature) {\n    const type = geometry.getType();\n    switch (type) {\n      case 'GeometryCollection': {\n        const geometries =\n          /** @type {import(\"../../geom.js\").GeometryCollection} */ (\n            geometry\n          ).getGeometriesArray();\n        for (const geometry of geometries) {\n          this.addGeometry_(geometry, feature);\n        }\n        break;\n      }\n      case 'MultiPolygon': {\n        const multiPolygonGeom =\n          /** @type {import(\"../../geom.js\").MultiPolygon} */ (geometry);\n        this.addCoordinates_(\n          type,\n          multiPolygonGeom.getFlatCoordinates(),\n          multiPolygonGeom.getEndss(),\n          feature,\n          getUid(feature),\n          multiPolygonGeom.getStride()\n        );\n        break;\n      }\n      case 'MultiLineString': {\n        const multiLineGeom =\n          /** @type {import(\"../../geom.js\").MultiLineString|RenderFeature} */ (\n            geometry\n          );\n        this.addCoordinates_(\n          type,\n          multiLineGeom.getFlatCoordinates(),\n          multiLineGeom.getEnds(),\n          feature,\n          getUid(feature),\n          multiLineGeom.getStride()\n        );\n        break;\n      }\n      case 'MultiPoint': {\n        const multiPointGeom =\n          /** @type {import(\"../../geom.js\").MultiPoint|RenderFeature} */ (\n            geometry\n          );\n        this.addCoordinates_(\n          type,\n          multiPointGeom.getFlatCoordinates(),\n          null,\n          feature,\n          getUid(feature),\n          multiPointGeom.getStride()\n        );\n        break;\n      }\n      case 'Polygon': {\n        const polygonGeom =\n          /** @type {import(\"../../geom.js\").Polygon|RenderFeature} */ (\n            geometry\n          );\n        this.addCoordinates_(\n          type,\n          polygonGeom.getFlatCoordinates(),\n          polygonGeom.getEnds(),\n          feature,\n          getUid(feature),\n          polygonGeom.getStride()\n        );\n        break;\n      }\n      case 'Point': {\n        const pointGeom = /** @type {import(\"../../geom.js\").Point} */ (\n          geometry\n        );\n        this.addCoordinates_(\n          type,\n          pointGeom.getFlatCoordinates(),\n          null,\n          feature,\n          getUid(feature),\n          pointGeom.getStride()\n        );\n        break;\n      }\n      case 'LineString':\n      case 'LinearRing': {\n        const lineGeom = /** @type {import(\"../../geom.js\").LineString} */ (\n          geometry\n        );\n        this.addCoordinates_(\n          type,\n          lineGeom.getFlatCoordinates(),\n          null,\n          feature,\n          getUid(feature),\n          lineGeom.getStride()\n        );\n        break;\n      }\n      default:\n      // pass\n    }\n  }\n\n  /**\n   * @param {GeometryType} type Geometry type\n   * @param {Array<number>} flatCoords Flat coordinates\n   * @param {Array<number> | Array<Array<number>> | null} ends Coordinate ends\n   * @param {Feature|RenderFeature} feature Feature\n   * @param {string} featureUid Feature uid\n   * @param {number} stride Stride\n   * @private\n   */\n  addCoordinates_(type, flatCoords, ends, feature, featureUid, stride) {\n    /** @type {number} */\n    let verticesCount;\n    switch (type) {\n      case 'MultiPolygon': {\n        const multiPolygonEndss = /** @type {Array<Array<number>>} */ (ends);\n        for (let i = 0, ii = multiPolygonEndss.length; i < ii; i++) {\n          let polygonEnds = multiPolygonEndss[i];\n          const prevPolygonEnds = i > 0 ? multiPolygonEndss[i - 1] : null;\n          const startIndex = prevPolygonEnds\n            ? prevPolygonEnds[prevPolygonEnds.length - 1]\n            : 0;\n          const endIndex = polygonEnds[polygonEnds.length - 1];\n          polygonEnds =\n            startIndex > 0\n              ? polygonEnds.map((end) => end - startIndex)\n              : polygonEnds;\n          this.addCoordinates_(\n            'Polygon',\n            flatCoords.slice(startIndex, endIndex),\n            polygonEnds,\n            feature,\n            featureUid,\n            stride\n          );\n        }\n        break;\n      }\n      case 'MultiLineString': {\n        const multiLineEnds = /** @type {Array<number>} */ (ends);\n        for (let i = 0, ii = multiLineEnds.length; i < ii; i++) {\n          const startIndex = i > 0 ? multiLineEnds[i - 1] : 0;\n          this.addCoordinates_(\n            'LineString',\n            flatCoords.slice(startIndex, multiLineEnds[i]),\n            null,\n            feature,\n            featureUid,\n            stride\n          );\n        }\n        break;\n      }\n      case 'MultiPoint':\n        for (let i = 0, ii = flatCoords.length; i < ii; i += stride) {\n          this.addCoordinates_(\n            'Point',\n            flatCoords.slice(i, i + 2),\n            null,\n            feature,\n            featureUid,\n            null\n          );\n        }\n        break;\n      case 'Polygon': {\n        const polygonEnds = /** @type {Array<number>} */ (ends);\n        if (feature instanceof RenderFeature) {\n          const multiPolygonEnds = inflateEnds(flatCoords, polygonEnds);\n          if (multiPolygonEnds.length > 1) {\n            this.addCoordinates_(\n              'MultiPolygon',\n              flatCoords,\n              multiPolygonEnds,\n              feature,\n              featureUid,\n              stride\n            );\n            return;\n          }\n        }\n        if (!this.polygonBatch.entries[featureUid]) {\n          this.polygonBatch.entries[featureUid] = this.addRefToEntry_(\n            featureUid,\n            {\n              feature: feature,\n              flatCoordss: [],\n              verticesCount: 0,\n              ringsCount: 0,\n              ringsVerticesCounts: [],\n            }\n          );\n        }\n        verticesCount = flatCoords.length / stride;\n        const ringsCount = ends.length;\n        const ringsVerticesCount = ends.map((end, ind, arr) =>\n          ind > 0 ? (end - arr[ind - 1]) / stride : end / stride\n        );\n        this.polygonBatch.verticesCount += verticesCount;\n        this.polygonBatch.ringsCount += ringsCount;\n        this.polygonBatch.geometriesCount++;\n        this.polygonBatch.entries[featureUid].flatCoordss.push(\n          getFlatCoordinatesXY(flatCoords, stride)\n        );\n        this.polygonBatch.entries[featureUid].ringsVerticesCounts.push(\n          ringsVerticesCount\n        );\n        this.polygonBatch.entries[featureUid].verticesCount += verticesCount;\n        this.polygonBatch.entries[featureUid].ringsCount += ringsCount;\n        for (let i = 0, ii = polygonEnds.length; i < ii; i++) {\n          const startIndex = i > 0 ? polygonEnds[i - 1] : 0;\n          this.addCoordinates_(\n            'LinearRing',\n            flatCoords.slice(startIndex, polygonEnds[i]),\n            null,\n            feature,\n            featureUid,\n            stride\n          );\n        }\n        break;\n      }\n      case 'Point':\n        if (!this.pointBatch.entries[featureUid]) {\n          this.pointBatch.entries[featureUid] = this.addRefToEntry_(\n            featureUid,\n            {\n              feature: feature,\n              flatCoordss: [],\n            }\n          );\n        }\n        this.pointBatch.geometriesCount++;\n        this.pointBatch.entries[featureUid].flatCoordss.push(flatCoords);\n        break;\n      case 'LineString':\n      case 'LinearRing':\n        if (!this.lineStringBatch.entries[featureUid]) {\n          this.lineStringBatch.entries[featureUid] = this.addRefToEntry_(\n            featureUid,\n            {\n              feature: feature,\n              flatCoordss: [],\n              verticesCount: 0,\n            }\n          );\n        }\n        verticesCount = flatCoords.length / stride;\n        this.lineStringBatch.verticesCount += verticesCount;\n        this.lineStringBatch.geometriesCount++;\n        this.lineStringBatch.entries[featureUid].flatCoordss.push(\n          getFlatCoordinatesXY(flatCoords, stride)\n        );\n        this.lineStringBatch.entries[featureUid].verticesCount += verticesCount;\n        break;\n      default:\n      // pass\n    }\n  }\n\n  /**\n   * @param {string} featureUid Feature uid\n   * @param {GeometryBatchItem} entry The entry to add\n   * @return {GeometryBatchItem} the added entry\n   * @private\n   */\n  addRefToEntry_(featureUid, entry) {\n    const currentRef = this.uidToRef_.get(featureUid);\n\n    // the ref starts at 1 to distinguish from white color (no feature)\n    const ref =\n      currentRef || this.freeGlobalRef_.pop() || ++this.globalCounter_;\n    entry.ref = ref;\n    if (!currentRef) {\n      this.refToFeature_.set(ref, entry.feature);\n      this.uidToRef_.set(featureUid, ref);\n    }\n    return entry;\n  }\n\n  /**\n   * Return a ref to the pool of available refs.\n   * @param {number} ref the ref to return\n   * @param {string} featureUid the feature uid\n   * @private\n   */\n  returnRef_(ref, featureUid) {\n    if (!ref) {\n      throw new Error('This feature has no ref: ' + featureUid);\n    }\n    this.refToFeature_.delete(ref);\n    this.uidToRef_.delete(featureUid);\n    this.freeGlobalRef_.push(ref);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   */\n  changeFeature(feature) {\n    this.removeFeature(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      return;\n    }\n    this.addGeometry_(geometry, feature);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   */\n  removeFeature(feature) {\n    let entry;\n    entry = this.clearFeatureEntryInPointBatch_(feature) || entry;\n    entry = this.clearFeatureEntryInPolygonBatch_(feature) || entry;\n    entry = this.clearFeatureEntryInLineStringBatch_(feature) || entry;\n    if (entry) {\n      this.returnRef_(entry.ref, getUid(entry.feature));\n    }\n  }\n\n  clear() {\n    this.polygonBatch.entries = {};\n    this.polygonBatch.geometriesCount = 0;\n    this.polygonBatch.verticesCount = 0;\n    this.polygonBatch.ringsCount = 0;\n    this.lineStringBatch.entries = {};\n    this.lineStringBatch.geometriesCount = 0;\n    this.lineStringBatch.verticesCount = 0;\n    this.pointBatch.entries = {};\n    this.pointBatch.geometriesCount = 0;\n    this.globalCounter_ = 0;\n    this.freeGlobalRef_ = [];\n    this.refToFeature_.clear();\n    this.uidToRef_.clear();\n  }\n\n  /**\n   * Resolve the feature associated to a ref.\n   * @param {number} ref Hit detected ref\n   * @return {Feature|RenderFeature} feature\n   */\n  getFeatureFromRef(ref) {\n    return this.refToFeature_.get(ref);\n  }\n}\n\n/**\n * @param {Array<number>} flatCoords Flat coords\n * @param {number} stride Stride\n * @return {Array<number>} Flat coords with only XY components\n */\nfunction getFlatCoordinatesXY(flatCoords, stride) {\n  if (stride === 2) {\n    return flatCoords;\n  }\n  return flatCoords.filter((v, i) => i % stride < 2);\n}\n\nexport default MixedGeometryBatch;\n", "/**\n * @module ol/render/webgl/renderinstructions\n */\nimport {apply as applyTransform} from '../../transform.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"./MixedGeometryBatch.js\").GeometryBatchItem} batchEntry Batch item\n * @param {number} currentIndex Current index\n * @return {number} The amount of values pushed\n */\nfunction pushCustomAttributesInRenderInstructions(\n  renderInstructions,\n  customAttributes,\n  batchEntry,\n  currentIndex\n) {\n  let shift = 0;\n  for (const key in customAttributes) {\n    const attr = customAttributes[key];\n    const value = attr.callback.call(batchEntry, batchEntry.feature);\n    renderInstructions[currentIndex + shift++] = value[0] ?? value;\n    if (!attr.size || attr.size === 1) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[1];\n    if (attr.size < 3) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[2];\n    if (attr.size < 4) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[3];\n  }\n  return shift;\n}\n\n/**\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @return {number} Cumulated size of all attributes\n */\nexport function getCustomAttributesSize(customAttributes) {\n  return Object.keys(customAttributes).reduce(\n    (prev, curr) => prev + (customAttributes[curr].size || 1),\n    0\n  );\n}\n\n/**\n * Render instructions for lines are structured like so:\n * [ x0, y0, customAttr0, ... , xN, yN, customAttrN ]\n * @param {import(\"./MixedGeometryBatch.js\").PointGeometryBatch} batch Point geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generatePointRenderInstructions(\n  batch,\n  renderInstructions,\n  customAttributes,\n  transform\n) {\n  // here we anticipate the amount of render instructions for points:\n  // 2 instructions per vertex for position (x and y)\n  // + 1 instruction per vertex per custom attributes\n  const totalInstructionsCount =\n    (2 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\n  if (\n    !renderInstructions ||\n    renderInstructions.length !== totalInstructionsCount\n  ) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const tmpCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      tmpCoords[0] = batchEntry.flatCoordss[i][0];\n      tmpCoords[1] = batchEntry.flatCoordss[i][1];\n      applyTransform(transform, tmpCoords);\n\n      renderInstructions[renderIndex++] = tmpCoords[0];\n      renderInstructions[renderIndex++] = tmpCoords[1];\n      renderIndex += pushCustomAttributesInRenderInstructions(\n        renderInstructions,\n        customAttributes,\n        batchEntry,\n        renderIndex\n      );\n    }\n  }\n  return renderInstructions;\n}\n\n/**\n * Render instructions for lines are structured like so:\n * [ customAttr0, ... , customAttrN, numberOfVertices0, x0, y0, ... , xN, yN, numberOfVertices1, ... ]\n * @param {import(\"./MixedGeometryBatch.js\").LineStringGeometryBatch} batch Line String geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generateLineStringRenderInstructions(\n  batch,\n  renderInstructions,\n  customAttributes,\n  transform\n) {\n  // here we anticipate the amount of render instructions for lines:\n  // 2 instructions per vertex for position (x and y)\n  // + 1 instruction per line per custom attributes\n  // + 1 instruction per line (for vertices count)\n  const totalInstructionsCount =\n    2 * batch.verticesCount +\n    (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\n  if (\n    !renderInstructions ||\n    renderInstructions.length !== totalInstructionsCount\n  ) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const flatCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      flatCoords.length = batchEntry.flatCoordss[i].length;\n      transform2D(\n        batchEntry.flatCoordss[i],\n        0,\n        flatCoords.length,\n        2,\n        transform,\n        flatCoords\n      );\n      renderIndex += pushCustomAttributesInRenderInstructions(\n        renderInstructions,\n        customAttributes,\n        batchEntry,\n        renderIndex\n      );\n\n      // vertices count\n      renderInstructions[renderIndex++] = flatCoords.length / 2;\n\n      // looping on points for positions\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 2) {\n        renderInstructions[renderIndex++] = flatCoords[j];\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\n      }\n    }\n  }\n  return renderInstructions;\n}\n\n/**\n * Render instructions for polygons are structured like so:\n * [ customAttr0, ..., customAttrN, numberOfRings, numberOfVerticesInRing0, ..., numberOfVerticesInRingN, x0, y0, ..., xN, yN, numberOfRings,... ]\n * @param {import(\"./MixedGeometryBatch.js\").PolygonGeometryBatch} batch Polygon geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generatePolygonRenderInstructions(\n  batch,\n  renderInstructions,\n  customAttributes,\n  transform\n) {\n  // here we anticipate the amount of render instructions for polygons:\n  // 2 instructions per vertex for position (x and y)\n  // + 1 instruction per polygon per custom attributes\n  // + 1 instruction per polygon (for vertices count in polygon)\n  // + 1 instruction per ring (for vertices count in ring)\n  const totalInstructionsCount =\n    2 * batch.verticesCount +\n    (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount +\n    batch.ringsCount;\n  if (\n    !renderInstructions ||\n    renderInstructions.length !== totalInstructionsCount\n  ) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const flatCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      flatCoords.length = batchEntry.flatCoordss[i].length;\n      transform2D(\n        batchEntry.flatCoordss[i],\n        0,\n        flatCoords.length,\n        2,\n        transform,\n        flatCoords\n      );\n      renderIndex += pushCustomAttributesInRenderInstructions(\n        renderInstructions,\n        customAttributes,\n        batchEntry,\n        renderIndex\n      );\n\n      // ring count\n      renderInstructions[renderIndex++] =\n        batchEntry.ringsVerticesCounts[i].length;\n\n      // vertices count in each ring\n      for (\n        let j = 0, jj = batchEntry.ringsVerticesCounts[i].length;\n        j < jj;\n        j++\n      ) {\n        renderInstructions[renderIndex++] =\n          batchEntry.ringsVerticesCounts[i][j];\n      }\n\n      // looping on points for positions\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 2) {\n        renderInstructions[renderIndex++] = flatCoords[j];\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\n      }\n    }\n  }\n  return renderInstructions;\n}\n", "/**\n * @module ol/render/webgl/VectorStyleRenderer\n */\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport {WebGLWorkerMessageType} from './constants.js';\nimport {colorEncodeId} from './utils.js';\nimport {\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n} from '../../transform.js';\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\nimport {\n  generateLineStringRenderInstructions,\n  generatePointRenderInstructions,\n  generatePolygonRenderInstructions,\n  getCustomAttributesSize,\n} from './renderinstructions.js';\nimport {parseLiteralStyle} from '../../webgl/styleparser.js';\n\nconst tmpColor = [];\nconst WEBGL_WORKER = createWebGLWorker();\nlet workerMessageCounter = 0;\n\n/**\n * Names of attributes made available to the vertex shader.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const Attributes = {\n  POSITION: 'a_position',\n  INDEX: 'a_index',\n  SEGMENT_START: 'a_segmentStart',\n  SEGMENT_END: 'a_segmentEnd',\n  PARAMETERS: 'a_parameters',\n  JOIN_ANGLES: 'a_joinAngles',\n  DISTANCE: 'a_distance',\n};\n\n/**\n * @typedef {Object} AttributeDefinition A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {number} [size] Amount of numerical values composing the attribute, either 1, 2, 3 or 4; in case size is > 1, the return value\n * of the callback should be an array; if unspecified, assumed to be a single float value\n * @property {function(this:import(\"./MixedGeometryBatch.js\").GeometryBatchItem, import(\"../../Feature\").FeatureLike):number|Array<number>} callback This callback computes the numerical value of the\n * attribute for a given feature.\n */\n\n/**\n * @typedef {Object<string, AttributeDefinition>} AttributeDefinitions\n * @typedef {Object<string, import(\"../../webgl/Helper\").UniformValue>} UniformDefinitions\n */\n\n/**\n * @typedef {Object} WebGLBuffers\n * @property {Array<WebGLArrayBuffer>} polygonBuffers Array containing indices and vertices buffers for polygons\n * @property {Array<WebGLArrayBuffer>} lineStringBuffers Array containing indices and vertices buffers for line strings\n * @property {Array<WebGLArrayBuffer>} pointBuffers Array containing indices and vertices buffers for points\n * @property {import(\"../../transform.js\").Transform} invertVerticesTransform Inverse of the transform applied when generating buffers\n */\n\n/**\n * @typedef {Object} RenderInstructions\n * @property {Float32Array|null} polygonInstructions Polygon instructions; null if nothing to render\n * @property {Float32Array|null} lineStringInstructions LineString instructions; null if nothing to render\n * @property {Float32Array|null} pointInstructions Point instructions; null if nothing to render\n */\n\n/**\n * @typedef {Object} ShaderProgram An object containing both shaders (vertex and fragment)\n * @property {string} vertex Vertex shader source\n * @property {string} fragment Fragment shader source\n */\n\n/**\n * @typedef {Object} StyleShaders\n * @property {import(\"../../webgl/ShaderBuilder.js\").ShaderBuilder} builder Shader builder with the appropriate presets.\n * @property {AttributeDefinitions} [attributes] Custom attributes made available in the vertex shaders.\n * Default shaders rely on the attributes in {@link Attributes}.\n * @property {UniformDefinitions} [uniforms] Additional uniforms usable in shaders.\n */\n\n/**\n * @typedef {import('../../style/webgl.js').WebGLStyle|StyleShaders} VectorStyle\n */\n\n/**\n * @classdesc This class is responsible for:\n * 1. generate WebGL buffers according to a provided style, using a MixedGeometryBatch as input\n * 2. rendering geometries contained in said buffers\n *\n * A layer renderer will typically maintain several of these in order to have several styles rendered separately.\n *\n * A VectorStyleRenderer instance can be created either from a literal style or from shaders using either\n * `VectorStyleRenderer.fromStyle` or `VectorStyleRenderer.fromShaders`. The shaders should not be provided explicitly\n * but instead as a preconfigured ShaderBuilder instance.\n *\n * The `generateBuffers` method returns a promise resolving to WebGL buffers that are intended to be rendered by the\n * same renderer.\n */\nclass VectorStyleRenderer {\n  /**\n   * @param {VectorStyle} styleOrShaders Literal style or custom shaders\n   * @param {import('../../webgl/Helper.js').default} helper Helper\n   * @param {boolean} enableHitDetection Whether to enable the hit detection (needs compatible shader)\n   */\n  constructor(styleOrShaders, helper, enableHitDetection) {\n    this.helper_ = helper;\n\n    this.hitDetectionEnabled_ = enableHitDetection;\n    let shaders = /** @type {StyleShaders} */ (styleOrShaders);\n    const isShaders = 'builder' in styleOrShaders;\n    if (!isShaders) {\n      const parseResult = parseLiteralStyle(\n        /** @type {import('../../style/webgl.js').WebGLStyle} */ (\n          styleOrShaders\n        )\n      );\n      shaders = {\n        builder: parseResult.builder,\n        attributes: parseResult.attributes,\n        uniforms: parseResult.uniforms,\n      };\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = !!shaders.builder.getFillVertexShader();\n    if (this.hasFill_) {\n      this.fillVertexShader_ = shaders.builder.getFillVertexShader();\n      this.fillFragmentShader_ = shaders.builder.getFillFragmentShader();\n      this.fillProgram_ = this.helper_.getProgram(\n        this.fillFragmentShader_,\n        this.fillVertexShader_\n      );\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = !!shaders.builder.getStrokeVertexShader();\n    if (this.hasStroke_) {\n      this.strokeVertexShader_ = shaders.builder.getStrokeVertexShader();\n      this.strokeFragmentShader_ = shaders.builder.getStrokeFragmentShader();\n      this.strokeProgram_ = this.helper_.getProgram(\n        this.strokeFragmentShader_,\n        this.strokeVertexShader_\n      );\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = !!shaders.builder.getSymbolVertexShader();\n    if (this.hasSymbol_) {\n      this.symbolVertexShader_ = shaders.builder.getSymbolVertexShader();\n      this.symbolFragmentShader_ = shaders.builder.getSymbolFragmentShader();\n      this.symbolProgram_ = this.helper_.getProgram(\n        this.symbolFragmentShader_,\n        this.symbolVertexShader_\n      );\n    }\n\n    const hitDetectionAttributes = this.hitDetectionEnabled_\n      ? {\n          hitColor: {\n            callback() {\n              return colorEncodeId(this.ref, tmpColor);\n            },\n            size: 4,\n          },\n        }\n      : {};\n\n    this.customAttributes_ = Object.assign(\n      {},\n      hitDetectionAttributes,\n      shaders.attributes\n    );\n    this.uniforms_ = shaders.uniforms;\n\n    const customAttributesDesc = Object.entries(this.customAttributes_).map(\n      ([name, value]) => ({\n        name: `a_prop_${name}`,\n        size: value.size || 1,\n        type: AttributeType.FLOAT,\n      })\n    );\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.polygonAttributesDesc_ = [\n      {\n        name: Attributes.POSITION,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      ...customAttributesDesc,\n    ];\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.lineStringAttributesDesc_ = [\n      {\n        name: Attributes.SEGMENT_START,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: Attributes.SEGMENT_END,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: Attributes.JOIN_ANGLES,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: Attributes.DISTANCE,\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: Attributes.PARAMETERS,\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n      ...customAttributesDesc,\n    ];\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.pointAttributesDesc_ = [\n      {\n        name: Attributes.POSITION,\n        size: 2,\n        type: AttributeType.FLOAT,\n      },\n      {\n        name: Attributes.INDEX,\n        size: 1,\n        type: AttributeType.FLOAT,\n      },\n      ...customAttributesDesc,\n    ];\n\n    if (shaders.uniforms) {\n      this.helper_.addUniforms(shaders.uniforms);\n    }\n  }\n\n  /**\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {Promise<WebGLBuffers>} A promise resolving to WebGL buffers\n   */\n  async generateBuffers(geometryBatch, transform) {\n    const renderInstructions = this.generateRenderInstructions_(\n      geometryBatch,\n      transform\n    );\n    const [polygonBuffers, lineStringBuffers, pointBuffers] = await Promise.all(\n      [\n        this.generateBuffersForType_(\n          renderInstructions.polygonInstructions,\n          'Polygon',\n          transform\n        ),\n        this.generateBuffersForType_(\n          renderInstructions.lineStringInstructions,\n          'LineString',\n          transform\n        ),\n        this.generateBuffersForType_(\n          renderInstructions.pointInstructions,\n          'Point',\n          transform\n        ),\n      ]\n    );\n    // also return the inverse of the transform that was applied when generating buffers\n    const invertVerticesTransform = makeInverseTransform(\n      createTransform(),\n      transform\n    );\n    return {\n      polygonBuffers: polygonBuffers,\n      lineStringBuffers: lineStringBuffers,\n      pointBuffers: pointBuffers,\n      invertVerticesTransform: invertVerticesTransform,\n    };\n  }\n\n  /**\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {RenderInstructions} Render instructions\n   * @private\n   */\n  generateRenderInstructions_(geometryBatch, transform) {\n    const polygonInstructions = this.hasFill_\n      ? generatePolygonRenderInstructions(\n          geometryBatch.polygonBatch,\n          new Float32Array(0),\n          this.customAttributes_,\n          transform\n        )\n      : null;\n    const lineStringInstructions = this.hasStroke_\n      ? generateLineStringRenderInstructions(\n          geometryBatch.lineStringBatch,\n          new Float32Array(0),\n          this.customAttributes_,\n          transform\n        )\n      : null;\n    const pointInstructions = this.hasSymbol_\n      ? generatePointRenderInstructions(\n          geometryBatch.pointBatch,\n          new Float32Array(0),\n          this.customAttributes_,\n          transform\n        )\n      : null;\n\n    return {\n      polygonInstructions,\n      lineStringInstructions,\n      pointInstructions,\n    };\n  }\n\n  /**\n   * @param {Float32Array|null} renderInstructions Render instructions\n   * @param {import(\"../../geom/Geometry.js\").Type} geometryType Geometry type\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {Promise<Array<WebGLArrayBuffer>>|null} Indices buffer and vertices buffer; null if nothing to render\n   * @private\n   */\n  generateBuffersForType_(renderInstructions, geometryType, transform) {\n    if (renderInstructions === null) {\n      return null;\n    }\n\n    const messageId = workerMessageCounter++;\n    let messageType;\n    switch (geometryType) {\n      case 'Polygon':\n        messageType = WebGLWorkerMessageType.GENERATE_POLYGON_BUFFERS;\n        break;\n      case 'LineString':\n        messageType = WebGLWorkerMessageType.GENERATE_LINE_STRING_BUFFERS;\n        break;\n      case 'Point':\n        messageType = WebGLWorkerMessageType.GENERATE_POINT_BUFFERS;\n        break;\n      default:\n      // pass\n    }\n\n    /** @type {import('./constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: messageId,\n      type: messageType,\n      renderInstructions: renderInstructions.buffer,\n      renderInstructionsTransform: transform,\n      customAttributesSize: getCustomAttributesSize(this.customAttributes_),\n    };\n    WEBGL_WORKER.postMessage(message, [renderInstructions.buffer]);\n\n    // leave ownership of render instructions\n    renderInstructions = null;\n\n    return new Promise((resolve) => {\n      /**\n       * @param {*} event Event.\n       */\n      const handleMessage = (event) => {\n        const received = event.data;\n\n        // this is not the response to our request: skip\n        if (received.id !== messageId) {\n          return;\n        }\n\n        // we've received our response: stop listening\n        WEBGL_WORKER.removeEventListener('message', handleMessage);\n\n        // the helper has disposed in the meantime; the promise will not be resolved\n        if (!this.helper_.getGL()) {\n          return;\n        }\n\n        // copy & flush received buffers to GPU\n        const verticesBuffer = new WebGLArrayBuffer(\n          ARRAY_BUFFER,\n          DYNAMIC_DRAW\n        ).fromArrayBuffer(received.vertexBuffer);\n        const indicesBuffer = new WebGLArrayBuffer(\n          ELEMENT_ARRAY_BUFFER,\n          DYNAMIC_DRAW\n        ).fromArrayBuffer(received.indexBuffer);\n        this.helper_.flushBufferData(verticesBuffer);\n        this.helper_.flushBufferData(indicesBuffer);\n\n        resolve([indicesBuffer, verticesBuffer]);\n      };\n\n      WEBGL_WORKER.addEventListener('message', handleMessage);\n    });\n  }\n\n  /**\n   * Render the geometries in the given buffers.\n   * @param {WebGLBuffers} buffers WebGL Buffers to draw\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\n   */\n  render(buffers, frameState, preRenderCallback) {\n    this.hasFill_ &&\n      this.renderInternal_(\n        buffers.polygonBuffers[0],\n        buffers.polygonBuffers[1],\n        this.fillProgram_,\n        this.polygonAttributesDesc_,\n        frameState,\n        preRenderCallback\n      );\n    this.hasStroke_ &&\n      this.renderInternal_(\n        buffers.lineStringBuffers[0],\n        buffers.lineStringBuffers[1],\n        this.strokeProgram_,\n        this.lineStringAttributesDesc_,\n        frameState,\n        preRenderCallback\n      );\n    this.hasSymbol_ &&\n      this.renderInternal_(\n        buffers.pointBuffers[0],\n        buffers.pointBuffers[1],\n        this.symbolProgram_,\n        this.pointAttributesDesc_,\n        frameState,\n        preRenderCallback\n      );\n  }\n\n  /**\n   * @param {WebGLArrayBuffer} indicesBuffer Indices buffer\n   * @param {WebGLArrayBuffer} verticesBuffer Vertices buffer\n   * @param {WebGLProgram} program Program\n   * @param {Array<import('../../webgl/Helper.js').AttributeDescription>} attributes Attribute descriptions\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\n   * @private\n   */\n  renderInternal_(\n    indicesBuffer,\n    verticesBuffer,\n    program,\n    attributes,\n    frameState,\n    preRenderCallback\n  ) {\n    const renderCount = indicesBuffer.getSize();\n    if (renderCount === 0) {\n      return;\n    }\n    this.helper_.useProgram(program, frameState);\n    this.helper_.bindBuffer(verticesBuffer);\n    this.helper_.bindBuffer(indicesBuffer);\n    this.helper_.enableAttributes(attributes);\n    preRenderCallback();\n    this.helper_.drawElements(0, renderCount);\n  }\n}\n\nexport default VectorStyleRenderer;\n", "/**\n * @module ol/renderer/webgl/VectorLayer\n */\nimport BaseVector from '../../layer/BaseVector.js';\nimport MixedGeometryBatch from '../../render/webgl/MixedGeometryBatch.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport {DefaultUniform} from '../../webgl/Helper.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  makeInverse as makeInverseTransform,\n  multiply as multiplyTransform,\n  setFromArray as setFromTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {assert} from '../../asserts.js';\nimport {buffer, createEmpty, equals} from '../../extent.js';\nimport {colorDecodeId} from '../../render/webgl/utils.js';\nimport {\n  create as createMat4,\n  fromTransform as mat4FromTransform,\n} from '../../vec/mat4.js';\nimport {\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getWorldParameters} from './worldUtil.js';\nimport {listen, unlistenByKey} from '../../events.js';\n\nexport const Uniforms = {\n  ...DefaultUniform,\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n};\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').VectorStyle} VectorStyle\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {VectorStyle|Array<VectorStyle>} style Vector style as literal style or shaders; can also accept an array of styles\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Experimental WebGL vector renderer. Supports polygons, lines and points:\n *  * Polygons are broken down into triangles\n *  * Lines are rendered as strips of quads\n *  * Points are rendered as quads\n *\n * You need to provide vertex and fragment shaders as well as custom attributes for each type of geometry. All shaders\n * can access the uniforms in the {@link module:ol/webgl/Helper~DefaultUniform} enum.\n * The vertex shaders can access the following attributes depending on the geometry type:\n *  * For polygons: {@link module:ol/render/webgl/PolygonBatchRenderer~Attributes}\n *  * For line strings: {@link module:ol/render/webgl/LineStringBatchRenderer~Attributes}\n *  * For points: {@link module:ol/render/webgl/PointBatchRenderer~Attributes}\n *\n * Please note that the fragment shaders output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Note: this uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n */\nclass WebGLVectorLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = {\n      [Uniforms.RENDER_EXTENT]: [0, 0, 0, 0],\n      [Uniforms.PATTERN_ORIGIN]: [0, 0],\n      [Uniforms.GLOBAL_ALPHA]: 1,\n    };\n\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    this.sourceRevision_ = -1;\n\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = createTransform();\n\n    this.tmpCoords_ = [0, 0];\n    this.tmpTransform_ = createTransform();\n    this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @type {Array<VectorStyle>}\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    this.styleRenderers_ = [];\n\n    /**\n     * @type {Array<import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers>}\n     * @private\n     */\n    this.buffers_ = [];\n\n    this.applyOptions_(options);\n\n    /**\n     * @private\n     */\n    this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.initialFeaturesAdded_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../events.js\").EventsKey|null>}\n     */\n    this.sourceListenKeys_ = null;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  addInitialFeatures_(frameState) {\n    const source = this.getLayer().getSource();\n    const userProjection = getUserProjection();\n    let projectionTransform;\n    if (userProjection) {\n      projectionTransform = getTransformFromProjections(\n        userProjection,\n        frameState.viewState.projection\n      );\n    }\n    this.batch_.addFeatures(source.getFeatures(), projectionTransform);\n    this.sourceListenKeys_ = [\n      listen(\n        source,\n        VectorEventType.ADDFEATURE,\n        this.handleSourceFeatureAdded_.bind(this, projectionTransform),\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CHANGEFEATURE,\n        this.handleSourceFeatureChanged_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceFeatureDelete_,\n        this\n      ),\n      listen(\n        source,\n        VectorEventType.CLEAR,\n        this.handleSourceFeatureClear_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @private\n   */\n  applyOptions_(options) {\n    this.styles_ = Array.isArray(options.style)\n      ? options.style\n      : [options.style];\n  }\n\n  /**\n   * @private\n   */\n  createRenderers_() {\n    this.buffers_ = [];\n    this.styleRenderers_ = this.styles_.map(\n      (style) =>\n        new VectorStyleRenderer(style, this.helper, this.hitDetectionEnabled_)\n    );\n  }\n\n  reset(options) {\n    this.applyOptions_(options);\n    if (this.helper) {\n      this.createRenderers_();\n    }\n    super.reset(options);\n  }\n\n  afterHelperCreated() {\n    this.createRenderers_();\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../proj.js\").TransformFunction} projectionTransform Transform function.\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(projectionTransform, event) {\n    const feature = event.feature;\n    this.batch_.addFeature(feature, projectionTransform);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.batch_.changeFeature(feature);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    this.batch_.removeFeature(feature);\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.batch_.clear();\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which geometries are expressed\n   * @private\n   */\n  applyUniforms_(batchInvertTransform) {\n    // world to screen matrix\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\n    this.helper.setUniformMatrixValue(\n      Uniforms.PROJECTION_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_)\n    );\n\n    // screen to world matrix\n    makeInverseTransform(this.tmpTransform_, this.tmpTransform_);\n    this.helper.setUniformMatrixValue(\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_)\n    );\n\n    // pattern origin should always be [0, 0] in world coordinates\n    this.tmpCoords_[0] = 0;\n    this.tmpCoords_[1] = 0;\n    makeInverseTransform(this.tmpTransform_, batchInvertTransform);\n    applyTransform(this.tmpTransform_, this.tmpCoords_);\n    this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN, this.tmpCoords_);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(\n      frameState,\n      this.getLayer()\n    );\n\n    // draw the normal canvas\n    this.helper.prepareDraw(frameState);\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(frameState);\n\n    const canvas = this.helper.getCanvas();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const opacity = layerState.opacity;\n    if (opacity !== parseFloat(canvas.style.opacity)) {\n      canvas.style.opacity = String(opacity);\n    }\n\n    if (this.hitDetectionEnabled_) {\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.initialFeaturesAdded_) {\n      this.addInitialFeatures_(frameState);\n      this.initialFeaturesAdded_ = true;\n    }\n\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving =\n      !frameState.viewHints[ViewHint.ANIMATING] &&\n      !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n\n      const renderBuffer =\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        vectorSource.loadFeatures(\n          toUserExtent(extent, userProjection),\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      } else {\n        vectorSource.loadFeatures(extent, resolution, projection);\n      }\n\n      this.ready = false;\n\n      const transform = this.helper.makeProjectionTransform(\n        frameState,\n        createTransform()\n      );\n\n      const generatePromises = this.styleRenderers_.map((renderer, i) =>\n        renderer.generateBuffers(this.batch_, transform).then((buffers) => {\n          this.buffers_[i] = buffers;\n        })\n      );\n      Promise.all(generatePromises).then(() => {\n        this.ready = true;\n        this.getLayer().changed();\n      });\n\n      this.previousExtent_ = frameState.extent.slice();\n    }\n\n    return true;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([\n        Math.floor(frameState.size[0] / 2),\n        Math.floor(frameState.size[1] / 2),\n      ]);\n      this.helper.prepareDrawToRenderTarget(\n        frameState,\n        this.hitRenderTarget_,\n        true\n      );\n    }\n\n    this.currentFrameStateTransform_ = this.helper.makeProjectionTransform(\n      frameState,\n      this.currentFrameStateTransform_\n    );\n\n    do {\n      for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n        const renderer = this.styleRenderers_[i];\n        const buffers = this.buffers_[i];\n        if (!buffers) {\n          continue;\n        }\n        renderer.render(buffers, frameState, () => {\n          this.applyUniforms_(buffers.invertVerticesTransform);\n          this.helper.applyHitDetectionUniform(forHitDetection);\n        });\n      }\n      translateTransform(this.currentFrameStateTransform_, worldWidth, 0);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    assert(\n      this.hitDetectionEnabled_,\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.'\n    );\n    if (!this.styleRenderers_.length || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n\n    const pixel = applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice()\n    );\n\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const ref = colorDecodeId(color);\n    const feature = this.batch_.getFeatureFromRef(ref);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.sourceListenKeys_) {\n      this.sourceListenKeys_.forEach(function (key) {\n        unlistenByKey(key);\n      });\n      this.sourceListenKeys_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default WebGLVectorLayerRenderer;\n"],
  "mappings": "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",
  "names": ["geometry", "create", "create"]
}
